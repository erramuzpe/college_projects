//Compilar flex lenguaje.lex
//	   gcc -o lenguaje lenguaje.c -lfl
//Bison    bison -d -ly analizador.y

%%
entero               [[:digit:]]+
%%
{identificador} { yylval.str = (char *) malloc((strlen(yytext) +1) * sizeof(char)); 
		  strcpy(yylval.str,yytext); return tok_id; }
{entero}        { yylval.ent=atoi(yytext); return tok_entero; }
{oprel}	{ yylval.str = (char *) malloc((strlen(yytext) +1) * sizeof(char)); 
		  strcpy(yylval.str,yytext); return tok_oprel; }


%union {
	struct t_booleano {
		int place;
		int val;
		int type;

	}booleano;
	struct t_entero {
		int place;
		int val;
		int type;
	}entero;


	int num;
	char *cad;
	int tipo;
} 
%type <cad> T_IDENTIFICADOR
%type <num> T_NUMERO
%type <tipo> d_tipo
%type <tipo> tipo_escalar
%type <tipo> lista_id
%type <entero> T_ENTERO
%type <booleano> T_BOOLEANO

expresion T_SUM expresion 
if (($1.type == 1) && ($3.type == 1))
		{
			modificaTipo(T,1);
		}
		else
		{
			printf("Incompatible types on asignment, cacho garrulo!!!!\n");
		}


void exporta_cuadruplas(tipocuadrupla cuadruplas, char *nombre, tablasimbolos p){
	FILE *fichero;
	fichero = fopen (nombre, "w");
	int i;
	char *operacion;
	nodo *nodoid1;
	nodo *nodoid2;
	nodo *nodoid3;
	for(i=0; i<cuadruplas.ultimo; i++){
		switch(cuadruplas.tablacuadru[i][0]){
		        case OP_ASIG: 	operacion=(char *)calloc(3,sizeof(char));
					sprintf(operacion,":=");
					break;
			case OP_RESTA_UNARIA:	operacion=(char *)calloc(2,sizeof(char));
						sprintf(operacion,"-");
						break;
			case OP_MOD:	operacion=(char *)calloc(4,sizeof(char));
					sprintf(operacion,"mod");
					break;
			case OP_DIV:	operacion=(char *)calloc(4,sizeof(char));
					sprintf(operacion,"div");
					break;
			case OP_PROD:	operacion=(char *)calloc(2,sizeof(char));
					sprintf(operacion,"*");
					break;
			case OP_RESTA_BINARIA:	operacion=(char *)calloc(2,sizeof(char));
						sprintf(operacion,"-");
						break;
			case OP_SUMA:	operacion=(char *)calloc(2,sizeof(char));
					sprintf(operacion,"+");
					break;
			default: printf("OperaciÃ³n no existente para el compilador.\n");
		}
		nodoid1=buscar_id_elem_TS(p,cuadruplas.tablacuadru[i][3]);
		nodoid2=buscar_id_elem_TS(p,cuadruplas.tablacuadru[i][1]);
		if( cuadruplas.tablacuadru[i][2]==-1){
			if (cuadruplas.tablacuadru[i][0] == OP_ASIG) {
				fprintf(fichero, "%s := %s\n", nodoid1->nombre, nodoid2->nombre);
			}
			else {
				fprintf(fichero, "%s := %s %s\n", nodoid1->nombre, operacion, nodoid2->nombre);
			}
		}else{
			nodoid3=buscar_id_elem_TS(p,cuadruplas.tablacuadru[i][2]);
			fprintf(fichero, "%s := %s %s %s\n", nodoid1->nombre, nodoid2->nombre, operacion, nodoid3->nombre);
		}
	}
	fclose(fichero);
}

