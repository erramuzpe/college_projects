/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 25-mar-2011, 13:16:29
 */

package p2p;

import java.util.*;
import java.net.*;
import java.io.*;

/**
 *
 * @author sara
 */
public class NewJFrame extends javax.swing.JFrame {
    static String ip_conexion;
    String ip_desconexion;
    static int port = 5000;
    String archivo;
    static String fichero_descarga;
    InetAddress ip;
    String ip_string;
    Socket s;
    DataOutputStream p;
    DataInputStream b;
    String ip_descarga;
    
    /** Creates new form NewJFrame */
    public NewJFrame() {
        initComponents();
        this.setVisible(true);

        // Sacamos nuestra ip
        try {
            ip = InetAddress.getLocalHost();
            ip_string = ip.getHostAddress();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Desconectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Conectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Archivo a buscar:");

        jLabel2.setText("Info:");

        jLabel1.setText("IP:");

        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel4.setText("Pantalla informaci√≥n");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Archivo a descargar:");

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jButton4.setText("Descargar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("IP descarga:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(89, 89, 89)
                                        .addComponent(jButton1)
                                        .addGap(224, 224, 224)
                                        .addComponent(jLabel2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                                        .addComponent(jButton2)
                                        .addGap(240, 240, 240)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(71, 71, 71)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                                .addGap(48, 48, 48)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addGap(361, 361, 361))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jButton1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(89, 89, 89)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // DESCONEXI√ìN
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            Iterator<Socket> i=Servidor.sockets_abiertos.iterator();

            try {
                ip_desconexion = jTextField2.getText();

                while(i.hasNext()){
                    Socket s_desc = i.next();
                    ip_string = s_desc.getInetAddress().getHostAddress().toString();

                    // buscamos el socket correspondiente a esa ip para quitarlo
                    if (ip_string.equals(ip_desconexion)) {
                        synchronized (this) {
                            Servidor.sockets_abiertos.remove(s_desc);
                            s_desc.close();
                            escribirTA2 ("Desconectado de "+ip_desconexion+".\n");
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("Error al querer desconectarse.\n");
                escribirTA2 ("Se ha producido un ERROR al querer desconectarse.\n");
            }
}//GEN-LAST:event_jButton2ActionPerformed

    // BUSCAR
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            try {
                // Borramos el vector de ips con la busqueda anterior
                synchronized(this) {
                    Servidor.ip_respuestas.removeAllElements();
                }

                // Cogemos el nombre del archivo a buscar
                archivo = jTextField1.getText();
                escribirTA4 ("Buscando el archivo "+archivo+" en la red.\n");

                //Para sacar la hora actual nuestra
                long hora_nuestra = System.currentTimeMillis()/1000;
                String mensaje = "B@"+archivo+"@"+ip_string+"@"+hora_nuestra;
                enviarPaquete(mensaje);

                // Esperamos a que lleguen las respuestas de la b√∫squeda
                long milisInicio = System.currentTimeMillis(); // tiempo actual
                while (System.currentTimeMillis() <= milisInicio+3500) {

                }

                // Y las imprimimos
                escribirTA4 ("\n\nIP's que tienen el archivo buscado:\n");
                Iterator itr = Servidor.ip_respuestas.iterator();
                while (itr.hasNext()) {		//iteramos sobre todo el vector de ips de respuesta
                    escribirTA4 ((String)itr.next());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
}//GEN-LAST:event_jButton3ActionPerformed

    // CONEXION
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ip_conexion = jTextField2.getText();

            //Creo una conexion al socket servidor
            s = new Socket(ip_conexion,port);
            escribirTA2 ("Conectado con "+ip_conexion+" en el puerto "+port+".\n");
            p = new DataOutputStream ( s.getOutputStream() );
            b = new DataInputStream ( s.getInputStream() );
            /*synchronized (this) {
                Servidor.sockets_abiertos.add(s);
            }*/

            // Creamos un nuevo hilo
            Hilos cliente = new Hilos (s,b,p,"C",false);
            cliente.setName(b.toString());
            cliente.start();

            // Se env√≠a el mensaje de conexi√≥n
            writeObject(p,"C@"+ip_conexion);

             // Mensaje conectado
            /*String texto = "Mensaje conexion: "+readObject(b)+".\n";
            System.out.println(texto);
            escribirTA2 (texto);*/
       } catch (Exception e) {
            System.out.println("Error");
            escribirTA2 ("Se ha producido un ERROR al intentar conectarse.\n");
       }

    }//GEN-LAST:event_jButton1ActionPerformed

    // DESCARGAR
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                  fichero_descarga = jTextField3.getText();
                  ip_descarga = jTextField4.getText();

		  try {

                         Socket so_vecino = new Socket();
                         Iterator itr = Servidor.sockets_abiertos.iterator();

			  // Sacamos el canal de lectura del servidor que nos manda el fichero
			  Boolean no_es_vecino = true;

			  while (itr.hasNext() && no_es_vecino) {		//iteramos sobre todo el vector de sockets
				so_vecino = (Socket)itr.next();			//sacamos el siguiente socket

                                // Sacamos la ip del socket vecino
                                String ip_s = so_vecino.getInetAddress().getHostAddress().toString();

				if (ip_s.equals(ip_descarga)) {				//Si el envio es de un vecino
				    no_es_vecino = false;

				    //Obtengo una referencia al canal de lectura del socket cliente
                                    DataInputStream inp = new DataInputStream ( so_vecino.getInputStream() );
                                    DataOutputStream outp = new DataOutputStream ( so_vecino.getOutputStream() );
                                    writeObject(outp,"D@"+fichero_descarga+"@"+ip_string); //Escribir el mensaje de descarga

                                    // Creamos el hilo receptor.
                                    /*HiloReceptorFichero hr = new HiloReceptorFichero (inp,fichero_descarga);
                                    hr.start();*/
				}
				else {
				    no_es_vecino = true;
				}
			  }

			  if (no_es_vecino) { // Crear un nuevo socket cliente para recibir el fichero

				Socket so = new Socket(ip_descarga,port);

				//Obtengo una referencia al canal de lectura del socket cliente
				DataInputStream inp = new DataInputStream ( so.getInputStream() );
                                DataOutputStream outp = new DataOutputStream ( so.getOutputStream() );
                                writeObject(outp,"D@"+fichero_descarga+"@"+ip_string); //Escribir el mensaje de descarga

                                // Creamos el hilo receptor
                                HiloReceptorFichero hr = new HiloReceptorFichero (inp,fichero_descarga);
                                hr.start();
				so.close();

			  }
                          escribirTA1 ("Descargando el fichero: "+fichero_descarga+".\n");

		  } catch (Exception e) {
			  e.printStackTrace();
                          escribirTA1 ("Se ha producido un ERROR descargando el fichero: "+fichero_descarga+".\n");
		  }

     		  //descargarFichero(b,fichero_descarga);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
                new NewJFrame().setVisible(true);
                /*Socket s;
                DataOutputStream p;
                DataInputStream b;*/

                //String host = "192.168.1.128";
                //String host = "172.16.210.23";
                //String host = "10.1.1.142";

                String respuesta;
                String mensaje;
                //String fichero_descarga = "archivo.txt";

                //Referencia a la entrada por consola (System.in)
                //BufferedReader    in = new BufferedReader(new InputStreamReader(System.in));

                try {

                    //Creo las referencias al canal de escritura y lectura del socket
                    /*p = new DataOutputStream ( s.getOutputStream() );
                    b = new DataInputStream ( s.getInputStream() );*/

                    InetAddress ip = InetAddress.getLocalHost();
                    String ip_string = ip.getHostAddress();

                    while (true) {

                    }

                } catch (UnknownHostException e) {
                    System.out.println("No puedo conectarme a " + ip_conexion + ":" + port);
                } catch (IOException e) {
                    System.out.println("Error de E/S en " + ip_conexion + ":" + port);
                } catch (Exception e) {
                    System.out.println("Error");
                }

            }
        });
    }

        public static void writeObject(DataOutputStream out, String mensaje) throws IOException {
		// Longitud de la cadena
		int c = mensaje.length();

		// Se env√≠a la longitud de la cadena + 1 por el \0 necesario en C
		out.writeInt (c+1);

		// Se env√≠a la cadena como bytes.
		out.writeBytes (mensaje);

		// Se env√≠a el \0 del final
		out.writeByte ('\0');
	}


         public static void enviarPaquete(String mensaje) {
		Socket envios = new Socket();
                DataOutputStream p;
		ArrayList aux = new ArrayList();
		Iterator itr = Servidor.sockets_abiertos.iterator();

		try {
                        // enviamos el mensaje a todos los vecinos
			while (itr.hasNext()) {					//iteramos sobre todo el vector de sockets
			      envios = (Socket)itr.next();			//sacamos el siguiente socket
                              p = new DataOutputStream(envios.getOutputStream());
                              writeObject(p,mensaje);
			}

		} catch (Exception e) {
			e.printStackTrace();
                        //escribirTA3 ("Se ha producido un ERROR al enviar el mensaje de b√∫squeda a todos los vecinos.\n");
		}
	}

         /*public static void descargarFichero(DataInputStream b, String fichero_descarga) {

		try {
			String mensaje = readDataFile(b);   //Recibir mensaje de descarga byte a byte para que no haya problemas con las fotos
			System.out.println("Recepcion " + mensaje );
			String ruta = "./Descargas/";
			File fichero = new File (ruta+fichero_descarga);
			FileInputStream in = new FileInputStream(fichero);
			int tam = mensaje.length();
			byte[] buf = new byte[tam];
			int longi;

			// Para escribir el fichero
			FileOutputStream fw = new FileOutputStream(fichero);
			//BufferedWriter bw = new BufferedWriter(fw);

			//bw.write(mensaje);
		 	while ((longi = in.read(buf)) != -1) {
			      fw.write(buf, 0, longi);
			}
			System.out.println("COMPLETADO!");
			fw.flush();
			fw.close();

		} catch(Exception e) {
         		e.printStackTrace();
                        //escribirTA1 ("Se ha producido un ERROR descargando el fichero: "+fichero_descarga+".\n");
      		}
	}*/

        public void escribirTA1 (String texto) {
                String anterior = jTextArea1.getText();
                jTextArea1.setText(anterior+"\n"+texto);
        }

        public void escribirTA2 (String texto) {
                String anterior = jTextArea2.getText();
                jTextArea2.setText(anterior+"\n"+texto);
        }

        public void escribirTA3 (String texto) {
                String anterior = jTextArea3.getText();
                jTextArea3.setText(anterior+"\n"+texto);
        }

        public void escribirTA4 (String texto) {
                String anterior = jTextArea4.getText();
                jTextArea4.setText(anterior+"\n"+texto);
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

}
